! Preferences file for NEdit
!
! This file is overwritten by the "Save Defaults..." command in NEdit 
! and serves only the interactively settable options presented in the NEdit
! "Preferences" menu.  To modify other options, such as key bindings, use 
! the .Xdefaults file in your home directory (or the X resource 
! specification method appropriate to your system).  The contents of this 
! file can be moved into an X resource file, but since resources in this file
! override their corresponding X resources, either this file should be 
! deleted or individual resource lines in the file should be deleted for the
! moved lines to take effect.

nedit.fileVersion: 5.5
nedit.shellCommands: \
	spell:Alt+B:s:ED:\n\
		(cat;echo "") | spell\n\
	wc::w:ED:\n\
		wc | awk '{print $1 " lines, " $2 " words, " $3 " characters"}'\n\
	sort::o:EX:\n\
		sort\n\
	number lines::n:AW:\n\
		nl -ba\n\
	make:Alt+Z:m:W:\n\
		make\n\
	expand::p:EX:\n\
		expand\n\
	unexpand::u:EX:\n\
		unexpand\n
nedit.macroCommands: \
	Complete Word:Alt+D::: {\n\
		# Tuning parameters\n\
		ScanDistance = 200\n\
		\n\
		# Search back to a word boundary to find the word to complete\n\
		startScan = max(0, $cursor - ScanDistance)\n\
		endScan = min($text_length, $cursor + ScanDistance)\n\
		scanString = get_range(startScan, endScan)\n\
		keyEnd = $cursor-startScan\n\
		keyStart = search_string(scanString, "<", keyEnd, "backward", "regex")\n\
		if (keyStart == -1)\n\
		    return\n\
		keyString = "<" substring(scanString, keyStart, keyEnd)\n\
		\n\
		# search both forward and backward from the cursor position.  Note that\n\
		# using a regex search can lead to incorrect results if any of the special\n\
		# regex characters is encountered, which is not considered a delimiter\n\
		backwardSearchResult = search_string(scanString, keyString, keyStart-1, \\\n\
		    	"backward", "regex")\n\
		forwardSearchResult = search_string(scanString, keyString, keyEnd, "regex")\n\
		if (backwardSearchResult == -1 && forwardSearchResult == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# if only one direction matched, use that, otherwise use the nearest\n\
		if (backwardSearchResult == -1)\n\
		    matchStart = forwardSearchResult\n\
		else if (forwardSearchResult == -1)\n\
		    matchStart = backwardSearchResult\n\
		else {\n\
		    if (keyStart - backwardSearchResult <= forwardSearchResult - keyEnd)\n\
		    	matchStart = backwardSearchResult\n\
		    else\n\
		    	matchStart = forwardSearchResult\n\
		}\n\
		\n\
		# find the complete word\n\
		matchEnd = search_string(scanString, ">", matchStart, "regex")\n\
		completedWord = substring(scanString, matchStart, matchEnd)\n\
		\n\
		# replace it in the window\n\
		replace_range(startScan + keyStart, $cursor, completedWord)\n\
	}\n\
	Fill Sel. w/Char:::R: {\n\
		if ($selection_start == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# Ask the user what character to fill with\n\
		fillChar = string_dialog("Fill selection with what character?", "OK", "Cancel")\n\
		if ($string_dialog_button == 2 || $string_dialog_button == 0)\n\
		    return\n\
		\n\
		# Count the number of lines in the selection\n\
		nLines = 0\n\
		for (i=$selection_start; i<$selection_end; i++)\n\
		    if (get_character(i) == "\\n")\n\
		    	nLines++\n\
		\n\
		# Create the fill text\n\
		rectangular = $selection_left != -1\n\
		line = ""\n\
		fillText = ""\n\
		if (rectangular) {\n\
		    for (i=0; i<$selection_right-$selection_left; i++)\n\
			line = line fillChar\n\
		    for (i=0; i<nLines; i++)\n\
			fillText = fillText line "\\n"\n\
		    fillText = fillText line\n\
		} else {\n\
		    if (nLines == 0) {\n\
		    	for (i=$selection_start; i<$selection_end; i++)\n\
		    	    fillText = fillText fillChar\n\
		    } else {\n\
		    	startIndent = 0\n\
		    	for (i=$selection_start-1; i>=0 && get_character(i)!="\\n"; i--)\n\
		    	    startIndent++\n\
		    	for (i=0; i<$wrap_margin-startIndent; i++)\n\
		    	    fillText = fillText fillChar\n\
		    	fillText = fillText "\\n"\n\
			for (i=0; i<$wrap_margin; i++)\n\
			    line = line fillChar\n\
			for (i=0; i<nLines-1; i++)\n\
			    fillText = fillText line "\\n"\n\
			for (i=$selection_end-1; i>=$selection_start && get_character(i)!="\\n"; \\\n\
			    	i--)\n\
			    fillText = fillText fillChar\n\
		    }\n\
		}\n\
		\n\
		# Replace the selection with the fill text\n\
		replace_selection(fillText)\n\
	}\n\
	Quote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("^.*$", "\\\\> &", "regex")\n\
		else\n\
		    replace_in_selection("^.*$", "\\\\> &", "regex")\n\
	}\n\
	Unquote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
		else\n\
		    replace_in_selection("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>/* Comment */@C@C++@Java@CSS@JavaScript@Lex:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		replace_range(selStart, selEnd, "/* " get_selection() " */")\n\
		select(selStart, selEnd + 6)\n\
	}\n\
	Comments>/* Uncomment */@C@C++@Java@CSS@JavaScript@Lex:::R: {\n\
		sel = get_selection()\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		commentStart = search_string(sel, "/*", 0)\n\
		if (substring(sel, commentStart + 2, commentStart + 3) == " ")\n\
		    keepStart = commentStart + 3\n\
		else\n\
		    keepStart = commentStart + 2\n\
		keepEnd = search_string(sel, "*/", length(sel), "backward")\n\
		commentEnd = keepEnd + 2\n\
		if (substring(sel, keepEnd - 1, keepEnd) == " ")\n\
		    keepEnd = keepEnd - 1\n\
		replace_range(selStart + commentStart, selStart + commentEnd, \\\n\
			substring(sel, keepStart, keepEnd))\n\
		select(selStart, selEnd - (keepStart-commentStart) - \\\n\
			(commentEnd - keepEnd))\n\
	}\n\
	Comments>// Comment@C@C++@Java@JavaScript:::R: {\n\
		replace_in_selection("^.*$", "// &", "regex")\n\
	}\n\
	Comments>// Uncomment@C@C++@Java@JavaScript:::R: {\n\
		replace_in_selection("(^[ \\\\t]*// ?)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments># Comment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl:::R: {\n\
		replace_in_selection("^.*$", "#&", "regex")\n\
	}\n\
	Comments># Uncomment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl:::R: {\n\
		replace_in_selection("(^[ \\\\t]*#)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>-- Comment@SQL:::R: {\n\
		replace_in_selection("^.*$", "--&", "regex")\n\
	}\n\
	Comments>-- Uncomment@SQL:::R: {\n\
		replace_in_selection("(^[ \\\\t]*--)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>! Comment@X Resources:::R: {\n\
		replace_in_selection("^.*$", "!&", "regex")\n\
	}\n\
	Comments>! Uncomment@X Resources:::R: {\n\
		replace_in_selection("(^[ \\\\t]*!)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>% Comment@LaTeX:::R: {\n\
		                replace_in_selection("^.*$", "%&", "regex")\n\
		                }\n\
	Comments>% Uncomment@LaTeX:::R: {\n\
		                replace_in_selection("(^[ \\\\t]*%)(.*)$", "\\\\2", "regex")\n\
		                }\n\
	Comments>Bar Comment@C:::R: {\n\
		if ($selection_left != -1) {\n\
		    dialog("Selection must not be rectangular")\n\
		    return\n\
		}\n\
		start = $selection_start\n\
		end = $selection_end-1\n\
		origText = get_range($selection_start, $selection_end-1)\n\
		newText = "/*\\n" replace_in_string(get_range(start, end), \\\n\
			"^", " * ", "regex") "\\n */\\n"\n\
		replace_selection(newText)\n\
		select(start, start + length(newText))\n\
	}\n\
	Comments>Bar Uncomment@C:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		newText = get_range(selStart+3, selEnd-4)\n\
		newText = replace_in_string(newText, "^ \\\\* ", "", "regex")\n\
		replace_range(selStart, selEnd, newText)\n\
		select(selStart, selStart + length(newText))\n\
	}\n\
	Make C Prototypes@C@C++:::: {\n\
		if ($selection_start == -1) {\n\
		    start = 0\n\
		    end = $text_length\n\
		} else {\n\
		    start = $selection_start\n\
		    end = $selection_end\n\
		}\n\
		string = get_range(start, end)\n\
		nDefs = 0\n\
		searchPos = 0\n\
		prototypes = ""\n\
		staticPrototypes = ""\n\
		for (;;) {\n\
		    headerStart = search_string(string, \\\n\
			    "^[a-zA-Z]([^;#\\"'{}=><!/]|\\n)*\\\\)[ \\t]*\\n?[ \\t]*\\\\{", \\\n\
			    searchPos, "regex")\n\
		    if (headerStart == -1)\n\
			break\n\
		    headerEnd = search_string(string, ")", $search_end,"backward") + 1\n\
		    prototype = substring(string, headerStart, headerEnd) ";\\n"\n\
		    if (substring(string, headerStart, headerStart+6) == "static")\n\
			staticPrototypes = staticPrototypes prototype\n\
		    else\n\
		    			prototypes = prototypes prototype\n\
		    searchPos = headerEnd\n\
		    nDefs++\n\
		}\n\
		if (nDefs == 0) {\n\
		    dialog("No function declarations found")\n\
		    return\n\
		}\n\
		new()\n\
		focus_window("last")\n\
		replace_range(0, 0, prototypes staticPrototypes)\n\
	}\n\
	Rangesets>Goto next range:::: {\n\
		RANGESET_goto_next()\n\
	}\n\
	Rangesets>Goto prev. range:::: {\n\
		RANGESET_goto_prev()\n\
	}\n\
	Rangesets>Add:::R: {\n\
		RANGESET_add()\n\
	}\n\
	Rangesets>Remove:::R: {\n\
		RANGESET_remove_selected()\n\
	}\n\
	Rangesets>Clear:::: {\n\
		RANGESET_remove_all()\n\
	}\n\
	Rangesets>Destroy:::: {\n\
		RANGESET_destroy()\n\
	}\n\
	Rangesets>Rename:::: {\n\
		RANGESET_rename()\n\
	}\n\
	Rangesets>Color:::: {\n\
		RANGESET_color()\n\
	}\n\
	Rangesets>Save:::: {\n\
		RANGESET_save()\n\
	}\n\
	Rangesets>Load:::: {\n\
		RANGESET_load()\n\
	}\n\
	Rangesets>Find All:::: {\n\
		RANGESET_find_all()\n\
	}\n\
	Rangesets>Show Changes:::: {\n\
		RANGESET_show_changes()\n\
	}\n\
	In Comment@Haskell:Shift+Alt+Minus::: {\n\
		                beginning-of-selection()\n\
		                mark("1")\n\
		                deselect-all()\n\
		                insert-string("{-")\n\
		                newline()\n\
		                goto-mark("1")\n\
		                beginning-of-selection()\n\
		                backward-character("extend")\n\
		                backward-character("extend")\n\
		                backward-character("extend")\n\
		                mark("1")\n\
		                end-of-selection()\n\
		                deselect-all()\n\
		                insert-string("-}")\n\
		                newline()\n\
		                goto-mark("1")\n\
		        }\n\
	Out of Comment@Haskell:Shift+Alt+Equal::: {\n\
		                beginning-of-selection()\n\
		                mark("1")\n\
		                deselect-all()\n\
		                replace("{-", "")\n\
		                delete-previous-character()\n\
		                goto-mark("1")\n\
		                end-of-selection()\n\
		                deselect-all()\n\
		                replace("-}", "", "backward")\n\
		                delete-previous-character()\n\
		                goto-mark("1")\n\
		                process-shift-down()\n\
		        }\n
nedit.bgMenuCommands: \
	Undo:::: {\n\
		undo()\n\
	}\n\
	Redo:::: {\n\
		redo()\n\
	}\n\
	Cut:::R: {\n\
		cut_clipboard()\n\
	}\n\
	Copy:::R: {\n\
		copy_clipboard()\n\
	}\n\
	Paste:::: {\n\
		paste_clipboard()\n\
	}\n
nedit.highlightPatterns: Ada:Default\n\
	Awk:Default\n\
	C++:Default\n\
	C:Default\n\
	CSS:Default\n\
	Csh:Default\n\
	Fortran:Default\n\
	Java:Default\n\
	JavaScript:Default\n\
	LaTeX:Default\n\
	Lex:Default\n\
	Makefile:Default\n\
	Matlab:Default\n\
	NEdit Macro:Default\n\
	Pascal:Default\n\
	Perl:Default\n\
	PostScript:Default\n\
	Python:2:0{\n\
		Comment:"#":"$"::Comment::\n\
		String3s:"[uU]?[rR]?'{3}":"'{3}"::String::\n\
		String3d:"[uU]?[rR]?""{3}":"""{3}"::String::\n\
		String1s:"[uU]?[rR]?'":"'":"$":String::\n\
		String1d:"[uU]?[rR]?""":"""":"$":String::\n\
		String escape chars 3s:"\\\\(\\n|\\\\|'|""|a|b|f|n|r|t|v|[0-7]{1,3}|[xX][\\da-fA-F]+)":::String1:String3s:\n\
		String escape chars 3d:"\\\\(\\n|\\\\|'|""|a|b|f|n|r|t|v|[0-7]{1,3}|[xX][\\da-fA-F]+)":::String1:String3d:\n\
		String escape chars 1s:"\\\\(\\n|\\\\|'|""|a|b|f|n|r|t|v|[0-7]{1,3}|[xX][\\da-fA-F]+)":::String1:String1s:\n\
		String escape chars 1d:"\\\\(\\n|\\\\|'|""|a|b|f|n|r|t|v|[0-7]{1,3}|[xX][\\da-fA-F]+)":::String1:String1d:\n\
		Representation:"`":"`":"$":String2::\n\
		Representation cont:"\\\\\\n":::String2:Representation:\n\
		Number:"<((([1-9]\\d*|([1-9]\\d*|0)?\\.\\d+|([1-9]\\d*|0)\\.)[eE][\\-+]?\\d+|([1-9]\\d*|0)?\\.\\d+|([1-9]\\d*|0)\\.)[jJ]?|([1-9]\\d*|0)[jJ]|(0|[1-9]\\d*|0[0-7]+|0[xX][\\da-fA-F]+)[lL]?)>":::Numeric Const::\n\
		Import:"<(import|from)>":";|$":"#":Preprocessor::\n\
		Import continuation:"\\\\\\n":::Preprocessor:Import:\n\
		Member definition:"<(def)\\s+((__(abs|add|and|call|cmp|coerce|complex|contains|del|delattr|delitem|delslice|div|divmod|float|getattr|getitem|getslice|hash|hex|init|int|invert|len|long|lshift|mod|mul|neg|nonzero|oct|or|pos|pow|radd|rand|rdiv|rdivmod|repr|rlshift|rmod|rmul|ror|rpow|rrshift|rshift|rsub|rxor|setattr|setitem|setslice|str|sub|xor)__)|(__(bases|class|dict)__)|(and|assert|break|continue|def|del|elif|else|except|exec|finally|for|from|if|import|in|is|not|or|pass|print|raise|return|try|while|class|global|lambda)|([\\l_]\\w*))(?=(\\s*(\\\\\\n\\s*)?\\(\\s*|\\s*\\(\\s*(\\\\?\\n\\s*)?)self>)":::Plain::\n\
		Member def color:"\\1":::Keyword:Member definition:C\n\
		Member def special:"\\3":::Subroutine:Member definition:C\n\
		Member def depreciated:"\\5":::Identifier1:Member definition:C\n\
		Member def error:"\\7":::Flag:Member definition:C\n\
		Function definition:"<(def)\\s+((Ellipsis|None|__builtins__|__debug__|__import__|__name__|abs|apply|buffer|callable|chr|cmp|coerce|compile|complex|delattr|dir|divmod|eval|execfile|filter|float|getattr|globals|hasattr|hash|hex|id|input|int|intern|isinstance|issubclass|len|list|locals|long|map|max|min|oct|open|ord|pow|range|raw_input|reduce|reload|repr|round|self|setattr|slice|str|tuple|type|vars|xrange)|(and|assert|break|continue|def|del|elif|else|except|exec|finally|for|from|if|import|in|is|not|or|pass|print|raise|return|try|while|class|global|lambda)|([\\l_]\\w*))>":::Plain::\n\
		Function def color:"\\1":::Keyword:Function definition:C\n\
		Function def depreciated:"\\3":::Subroutine:Function definition:C\n\
		Function def error:"\\4":::Flag:Function definition:C\n\
		Class definition:"<(class)\\s+((Ellipsis|None|__builtins__|__debug__|__import__|__name__|abs|apply|buffer|callable|chr|cmp|coerce|compile|complex|delattr|dir|divmod|eval|execfile|filter|float|getattr|globals|hasattr|hash|hex|id|input|int|intern|isinstance|issubclass|len|list|locals|long|map|max|min|oct|open|ord|pow|range|raw_input|reduce|reload|repr|round|self|setattr|slice|str|tuple|type|vars|xrange)|(and|assert|break|continue|def|del|elif|else|except|exec|finally|for|from|if|import|in|is|not|or|pass|print|raise|return|try|while|class|global|lambda)|([\\l_]\\w*))>":::Plain::\n\
		Class def color:"\\1":::Storage Type:Class definition:C\n\
		Class def depreciated:"\\3":::Subroutine:Class definition:C\n\
		Class def error:"\\4":::Flag:Class definition:C\n\
		Member reference:"\\.\\s*(\\\\?\\n\\s*)?((__(abs|add|and|call|cmp|coerce|complex|contains|del|delattr|delitem|delslice|div|divmod|float|getattr|getitem|getslice|hash|hex|init|int|invert|len|long|lshift|mod|mul|neg|nonzero|oct|or|pos|pow|radd|rand|rdiv|rdivmod|repr|rlshift|rmod|rmul|ror|rpow|rrshift|rshift|rsub|rxor|setattr|setitem|setslice|str|sub|xor)__)|(__(bases|class|dict)__)|(and|assert|break|continue|def|del|elif|else|except|exec|finally|for|from|if|import|in|is|not|or|pass|print|raise|return|try|while|class|global|lambda)|([\\l_]\\w*))>":::Plain::\n\
		Member special method:"\\3":::Subroutine:Member reference:C\n\
		Member special attrib:"\\5":::Identifier1:Member reference:C\n\
		Member ref error:"\\7":::Flag:Member reference:C\n\
		Storage keyword:"<(class|global|lambda)>":::Storage Type::\n\
		Keyword:"<(and|assert|break|continue|def|del|elif|else|except|exec|finally|for|from|if|import|in|is|not|or|pass|print|raise|return|try|while)>":::Keyword::\n\
		Built-in function:"<(__import__|abs|apply|buffer|callable|chr|cmp|coerce|compile|complex|delattr|dir|divmod|eval|execfile|filter|float|getattr|globals|hasattr|hash|hex|id|input|int|intern|isinstance|issubclass|len|list|locals|long|map|max|min|oct|open|ord|pow|range|raw_input|reduce|reload|repr|round|setattr|slice|str|tuple|type|vars|xrange)>":::Subroutine::\n\
		Built-in name:"<(Ellipsis|None|__builtins__|__debug__|__name__|self)>":::Identifier1::\n\
		Braces and parens:"[[{()}\\]]":::Keyword::\n\
	}\n\
	Regex:Default\n\
	SGML HTML:Default\n\
	SQL:Default\n\
	Sh Ksh Bash:Default\n\
	Tcl:Default\n\
	VHDL:Default\n\
	Verilog:Default\n\
	XML:Default\n\
	X Resources:Default\n\
	Yacc:Default\n\
	MIPS Assembly:1:0{\n\
		comment:"#":"$"::Comment::\n\
		Label:"^ *[^ ]+:":::Identifier1::\n\
		String:"""":"""":"\\n":String::\n\
		Register:"\\$(zero|[vastgfrk][0-9pat]|[0-3]?[0-9])":::MIPS Register::\n\
		MIPS Instruction:"(abs(\\.[ds])?|addi?u?|andi*|divu?|multu*|mulo?u?|negu*|no[rt]|ori?|remu? |sllv?|sr[al]v?|ro[lr]|subu?|xori?|lu?i|slti?u?|seq|sg[et]u?|sleu?|sne|b|bcz[tf]|beqz?|bgez?(al)?|bgtz|blez|bltz(al)?|bnez?|bg[et]u?|bleu?|bltu?|j(al)?r?|la|l[bh]u|lw(cz|[lr])?|ld|ul(hu?|w)|s([bhd]|w([lr]|(cz))?)|us[hw]|move|m[ft](hi|lo)|mfc(z|1\\.d)|mtcz|add\\.[sd]|c\\.(eq|l[et])\\.[ds]|cvt\\.(d\\.[sw]|s\\.[dw]|w\\.[ds])|(div|[ls]|mov|mul|neg|sub)\\.[ds]|rfe|syscall|break|nop) |rfe|syscall|nop":::MIPS Instruction::\n\
		Numeric literal:"(0x)[0-9A-Fa-f]+|[0-9]+":::Numeric Const::\n\
		Assembler directives:".(align|asciiz?|byte|data|double|extern|float|globl|half|kdata|ktext|set|space|text|word)":::Preprocessor1::\n\
	}\n\
	Prolog:1:0{\n\
		Boxed Comment:"/\\*":"\\*/"::Comment::\n\
		Line Comment:"%":"$"::Comment::\n\
		Syntactic sugar:":-|\\.":::Text Arg::\n\
		Prolog built-in:"<assert[a-z]?>|<retract[a-z]?>|<halt>|<consult>|<is>":::Keyword::\n\
		Predicate:"<[a-z]\\w*>":::Subroutine::\n\
		Variable:"<[A-Z]\\w*>":::Identifier1::\n\
	}\n\
	Erlang:1:0{\n\
		Comment:"%":"$"::Comment::\n\
		Module attribute:"^[ 	]*-[_A-Za-z]*":::Preprocessor::\n\
		Macro:"<\\?[0-9A-Za-z_]*>":::Preprocessor::\n\
		Keyword:"<(after|case|end|if|of|receive|when)>":::Keyword::\n\
		Operator:"<(and|band|bsl|bsr|bor|bxor|div|or|rem)>":::Keyword::\n\
		Builtin function:"<(abs|apply|atom|atom_to_list|binary|binary_to_list|binary_to_term|catch|date|element|erase|exit|float|float_to_list|get|halt|hash|hd|info|integer|integer_to_list|length|link|list|list_to_atom|list_to_float|list_to_integer|list_to_tuple|node|nodes|now|pid|port|ports|processes|put|reference|register|registered|round|self|setelement|size|spawn|throw|time|tl|trace|trunc|tuple|tuple_to_list|unlink|unregister|whereis)>":::Storage Type::\n\
		Special identifier:"<(error|false|infinity|nil|ok|true|undefined)>":::Identifier1::\n\
		Atom:"<[a-z][0-9a-zA-Z_]*>":::Plain::\n\
		Character:"(\\$\\\\?.)":::Character Const::\n\
		Float:"<(\\+|-)?[0-9]+\\.[0-9]+((E|e)(\\+|-)?[0-9]+)?>":::Numeric Const::\n\
		Integer:"<(2#[01]+|8#[0-7]+|16#[0-9A-Fa-f]+|(10#)?[0-9]+)>":::Numeric Const::\n\
		Variable:"<[A-Z_][0-9a-zA-Z_]*>":::Identifier::\n\
		Single-quoted string:"'":"'"::String::\n\
		Double-quoted string:"""":""""::String::\n\
		String escape:"\\\\(.|\\n)":::String1:Double-quoted string:\n\
	}\n\
	Lua:1:0{\n\
		comment:"--":"$"::Comment::\n\
		keyword:"<(and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)>":::Keyword::\n\
		string:"""":"""":"\\n":String::\n\
		string2:"'":"'":"\\n":String::\n\
		string3:"\\[\\[":"]]"::String::\n\
		substring3:"\\[\\[":"]]"::String:string3:\n\
		string escape chars:"\\\\.":::String1:string:\n\
		string escape chars 2:"\\\\.":::String1:string2:\n\
		numeric constant:"<((\\+|-)?(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)>":::Numeric Const::\n\
		hashbang:"^[ \\t]*#[ \\t]*!.*lua":"$"::Comment::\n\
	}\n\
	Scheme:1:0{\n\
		Comment:";":"$"::Comment::\n\
		Quoted Constant:"'[^()""; \\t]+":::Text Key::\n\
		Character Constant:"<(#t|#f|#\\\\space|#\\\\newline|#\\\\.)>":::Text Key::\n\
		Numeric Constant:"<(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))>":::Text Key1::\n\
		Keyword + Prefix:"[^()""; \\t]<(=>|and|begin|case|cond|define|delay|do|else|if|lambda|let|let\\*|letrec|or|quasiquote|quote|set!|unquote|unquote-splicing)>":::Plain::\n\
		Keyword + Suffix:"<(=>|and|begin|case|cond|define|delay|do|else|if|lambda|let|let\\*|letrec|or|quasiquote|quote|set!|unquote|unquote-splicing)>[^()""; \\t]":::Plain::\n\
		Keyword:"<(=>|and|begin|case|cond|define|delay|do|else|if|lambda|let|let\\*|letrec|or|quasiquote|quote|set!|unquote|unquote-splicing)>":::Keyword::\n\
		String:"""":""""::String1::\n\
		String Escape:"\\\\.":::String:String:\n\
	}\n\
	Haskell:1:0{\n\
		comments1:"\\{-":"-\\}"::Comment::\n\
		comments2:"--":"$"::Comment::\n\
		comments3:"#!":"$"::Comment::\n\
		strings:"""":"""":"\\n":String::\n\
		chars:"'.'":::String::\n\
		keywords:"<(type|data|let|in|case|of|module|class|where|instance|import|do|deriving|-\\>|\\<-|=\\>|if|then|else|newtype|hiding|infix|infixl|infixr|primitive)>":::Keyword::\n\
		symbols:"<(\\||\\.|:|=)>":::Keyword::\n\
		braces:"[{}\\[\\]\\(\\)]":::Braces::\n\
		types:"<[A-Z][A-Za-z]*>":::Type::\n\
	}\n\
	Literate Haskell:1:0{\n\
		comments1:"\\{-":"-\\}"::Comment:Code:\n\
		comments2:"--":"$"::Comment:Code:\n\
		comments3:"#!":"$"::Comment:Code:\n\
		strings:"""":"""":"\\n":String:Code:\n\
		chars:"'.'":::String:Code:\n\
		keywords:"<(type|data|let|in|case|of|module|class|where|instance|import|do|deriving|-\\>|\\<-|=\\>|if|then|else|newtype|hiding|infix|infixl|infixr|primitive)>":::Keyword:Code:\n\
		symbols:"<(\\||\\.|:|=)>":::Keyword:Code:\n\
		braces:"[{}\\[\\]]":::Keyword:Code:\n\
		comments11:"\\{-":"-\\}"::Comment:Code1:\n\
		comments21:"--":"$"::Comment:Code1:\n\
		comments31:"#!":"$"::Comment:Code1:\n\
		strings1:"""":"""":"\\n":String:Code1:\n\
		chars1:"'.'":::String:Code1:\n\
		keywords1:"<(type|data|let|in|case|of|module|class|where|instance|import|do|deriving|-\\>|\\<-|=\\>|if|then|else|newtype|hiding|infix|infixl|infixr)>":::Keyword:Code1:\n\
		symbols1:"<(\\||\\.|:|=)>":::Keyword:Code1:\n\
		braces1:"[{}\\[\\]]":::Keyword:Code1:\n\
		Code:"^\\>":"$"::Plain::\n\
		CodeBeginEnd:"^[\\\\]begin\\{code\\}$":"^[\\\\]end\\{code\\}$"::Meta Keyword::\n\
		Code1:"^":"$"::Plain:CodeBeginEnd:\n\
		Text:"^.":"$"::Text Comment::\n\
	}\n\
	Forth:1:0{\n\
		Comment 1:"^\\(|[\\t ]\\([\\t ]|\\($":"\\)"::Comment::\n\
		Comment 2:"^\\\\|[\\t ]\\\\[\\t ]":"$"::Comment::\n\
	}
nedit.languageModes: 	Ada:.ada .ad .ads .adb .a:::::::\n\
	Awk:.awk:::::::\n\
	C++:.cc .hh .C .H .i .cxx .hxx .cpp .c++::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	C:.c .h::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	CSS:css::Auto:None:::".,/\\`'!|@#%^&*()=+{}[]"":;<>?~":\n\
	Csh:.csh .cshrc .login .logout:"^[ \\t]*#[ \\t]*![ \\t]*/bin/csh"::::::\n\
	Fortran:.f .f77 .for:::::::\n\
	Java:.java:::::::\n\
	JavaScript:.js:::::::\n\
	LaTeX:.tex .sty .cls .ltx .ins:::::::\n\
	Lex:.lex:::::::\n\
	Makefile:Makefile makefile .gmk:::None:8:8::\n\
	Matlab:.m .oct .sci:::::::\n\
	NEdit Macro:.nm .neditmacro:::::::\n\
	Pascal:.pas .p .int:::::::\n\
	Perl:.pl .pm .p5 .PL:"^[ \\t]*#[ \\t]*!.*perl":Auto:None:::".,/\\\\`'!$@#%^&*()-=+{}[]"":;<>?~|":\n\
	PostScript:.ps .eps .epsf .epsi:"^%!":::::"/%(){}[]<>":\n\
	Python:.py:"^#!.*python":Auto:None:::"!""#$%&'()*+,-./:;<=>?@[\\\\]^`{|}~":\n\
	Regex:.reg .regex:"\\(\\?[:#=!iInN].+\\)":None:Continuous::::\n\
	SGML HTML:.sgml .sgm .html .htm:"\\<[Hh][Tt][Mm][Ll]\\>"::::::\n\
	SQL:.sql:::::::\n\
	Sh Ksh Bash:.sh .bash .ksh .profile .bashrc .bash_logout .bash_login .bash_profile:"^[ \\t]*#[ \\t]*![ \\t]*/.*bin/(bash|ksh|sh|zsh)"::::::\n\
	Tcl:.tcl .tk .itcl .itk::Smart:None::::\n\
	VHDL:.vhd .vhdl .vdl:::::::\n\
	Verilog:.v:::::::\n\
	XML:.xml .xsl .dtd:"\\<(?i\\?xml|!doctype)"::None:::"<>/=""'()+*?|":\n\
	X Resources:.Xresources .Xdefaults .nedit:"^[!#].*([Aa]pp|[Xx]).*[Dd]efaults"::::::\n\
	Yacc:.y::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	MIPS Assembly:.s .S .a .mips .asm::Auto:::::\n\
	Prolog:.pl .pro .prolog:"^[ \\t]*#[ \\t]*!.*prolog"::Newline::::\n\
	Erlang:.erl .hrl:::::::\n\
	Lua:.lua:"^[ \\t]*#[ \\t]*!.*lua"::::::\n\
	Scheme:.scheme .scm:::::::\n\
	Haskell:.gs .hs:"#!/usr/pd/bin/runhugs.*":Auto:::::\n\
	Literate Haskell:.lhs:"#!/usr/pd/bin/runhugs.*":Auto:::::\n\
	Forth:.fs .fr .fth .4th:::::3::
nedit.styles: 	Plain:black:Plain\n\
	Comment:gray20:Italic\n\
	Keyword:black:Bold\n\
	Storage Type:brown:Bold\n\
	Storage Type1:saddle brown:Bold\n\
	String:darkGreen:Plain\n\
	String1:SeaGreen:Plain\n\
	String2:darkGreen:Bold\n\
	Preprocessor:RoyalBlue4:Plain\n\
	Preprocessor1:blue:Plain\n\
	Character Const:darkGreen:Plain\n\
	Numeric Const:darkGreen:Plain\n\
	Identifier:brown:Plain\n\
	Identifier1:RoyalBlue4:Plain\n\
	Identifier2:SteelBlue:Plain\n\
	Subroutine:brown:Plain\n\
	Subroutine1:chocolate:Plain\n\
	Ada Attributes:plum:Bold\n\
	Label:red:Italic\n\
	Flag:red:Bold\n\
	Text Comment:SteelBlue4:Italic\n\
	Text Key:VioletRed4:Bold\n\
	Text Key1:VioletRed4:Plain\n\
	Text Arg:RoyalBlue4:Bold\n\
	Text Arg1:SteelBlue4:Bold\n\
	Text Arg2:RoyalBlue4:Plain\n\
	Text Escape:gray30:Bold\n\
	LaTeX Math:darkGreen:Plain\n\
	Pointer:#660000:Bold\n\
	Regex:#009944:Bold\n\
	Warning:brown2:Italic\n\
	MIPS Instruction:black:Bold\n\
	MIPS Register:blue:Bold\n\
	MIPS Numeric const:blue:Plain\n\
	Type:orange4:Bold\n\
	Braces:purple4:Plain\n\
	Meta Keyword:purple4:Plain
nedit.smartIndentInit: 	C:Default\n\
	C++:Default\n\
	Python:Default\n\
	Matlab:Default\n\
	Scheme:	# number of characters in normal indent level  \n\
	$scheme_indent = "default"\n\
\n\
	# count occurrences of "(" and ")" in line containing $1\n\
	define count_in_line {\n\
	    # find ends of current line\n\
	    start = search("\\n", $1, "backward")\n\
	    stop  = search("\\n", $1,  "forward")\n\
	    if (start == -1) start = 0\n\
	    if (stop  == -1) stop = $text_length\n\
	    # count occurrences\n\
	    count = 0\n\
	    for (p=start; p<stop; p++) {\n\
        	# if double-quote, skip to matching double-quote\n\
        	if ("\\"" == get_character(p)) {\n\
        	    for (p++; p<stop; p++)\n\
                	if      ("\\\\" == get_character(p)) p++\n\
                	else if ("\\"" == get_character(p)) break\n\
        	    }\n\
        	# if backslash, skip next character\n\
        	else if ("\\\\" == get_character(p)) p++\n\
        	# if target character, increment count\n\
        	else if ( "(" == get_character(p)) count++\n\
        	else if ( ")" == get_character(p)) count-- \n\
        	}\n\
	    return count\n\
	    } # end count_in_line\n\
\n\
	# adapted from nedit's smart indenting for C/C++\n\
	define default_indent {\n\
	    if ($1 != "default")                return $1\n\
	    else if ($em_tab_dist != -1)        return $em_tab_dist\n\
	    else if ($tab_dist <= 8)            return $tab_dist\n\
	    else                                return 4\n\
	    } # end default_indent\n\
\n\
	# adapted from nedit's smart indenting for C/C++\n\
	define measure_indent {\n\
	    # find start of current line\n\
	    start = search("\\n", $1, "backward")\n\
	    if (start == -1) start = 0\n\
	    # measure indentation to first non-white character on the line\n\
	    indent = 0\n\
	    for (p=start+1; p<$1; p++) {\n\
        	c = get_character(p)\n\
        	if      (c == " ")      indent++\n\
        	else if (c == "\\t")    indent += $tab_dist - (indent % $tab_dist)\n\
        	else                    break\n\
	    }\n\
	    return indent\n\
	    } # end measure_indent\n\
	--End-of-Macro--\n\
	return(measure_indent($1) + \\\n\
        	  (default_indent($scheme_indent) * count_in_line($1-1)))\n\
	--End-of-Macro--\n\
	--End-of-Macro--
nedit.smartIndentInitCommon: Default
nedit.autoWrap: Newline
nedit.wrapMargin: 80
nedit.showWrapMargin: Always
nedit.autoIndent: Auto
nedit.autoSave: True
nedit.openInTab: True
nedit.saveOldVersion: False
nedit.showMatching: Delimiter
nedit.matchSyntaxBased: True
nedit.highlightSyntax: True
nedit.backlightChars: False
nedit.searchDialogs: False
nedit.beepOnSearchWrap: False
nedit.retainSearchDialogs: False
nedit.searchWraps: True
nedit.stickyCaseSenseButton: True
nedit.repositionDialogs: True
nedit.autoScroll: False
nedit.appendLF: True
nedit.sortOpenPrevMenu: True
nedit.statisticsLine: False
nedit.iSearchLine: False
nedit.sortTabs: False
nedit.tabBar: True
nedit.tabBarHideOne: True
nedit.toolTips: True
nedit.globalTabNavigate: False
nedit.lineNumbers: True
nedit.pathInWindowsMenu: True
nedit.warnFileMods: True
nedit.warnRealFileMods: True
nedit.warnExit: True
nedit.searchMethod: Literal
nedit.textRows: 24
nedit.textCols: 80
nedit.tabDistance: 8
nedit.emulateTabs: 0
nedit.insertTabs: True
nedit.textFont: -*-courier-medium-r-normal--*-120-*-*-*-iso8859-1
nedit.boldHighlightFont: -*-courier-bold-r-normal--*-120-*-*-*-iso8859-1
nedit.italicHighlightFont: -*-courier-medium-o-normal--*-120-*-*-*-iso8859-1
nedit.boldItalicHighlightFont: -*-courier-bold-o-normal--*-120-*-*-*-iso8859-1
nedit.textFgColor: black
nedit.textBgColor: rgb:e5/e5/e5
nedit.selectFgColor: black
nedit.selectBgColor: rgb:cc/cc/cc
nedit.hiliteFgColor: white
nedit.hiliteBgColor: red
nedit.lineNoFgColor: black
nedit.cursorFgColor: black
nedit.wrapMarginForeground: black
nedit.smartTags: True
nedit.prefFileRead: True
nedit.titleFormat: {%c} [%s] %f (%S) - %d
